fastlane_require 'dotenv'

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

#################################################
##               Setup & Config                ##
#################################################

ROOT_PATH = `pwd`
APP_IDENTIFIER = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
GRADLE_PATH = File.absolute_path('../android/app/build.gradle')

IOS_PATH = "ios/"
XCODE_PROJECT_PATH = IOS_PATH + "Hoard.xcodeproj"


lane :push_cert do |options|

  get_push_certificate(
    development: true,
    force: true, # create a new profile, even if the old one is still valid
    app_identifier: "com.hoardinc.Hoard", # optional app identifier,
    save_private_key: true,
    output_path: './certificates',
    p12_password: ENV['STORE_PASSWORD'],
    pem_name: 'com.hoardinc.Hoard - APS Development',
    new_profile: proc do |profile_path| # this block gets called when a new profile was generated
      puts profile_path # the absolute path to the new PEM file
      # insert the code to upload the PEM file to the server
    end
  )

  get_push_certificate(
    development: false,
    force: true, # create a new profile, even if the old one is still valid
    app_identifier: "com.hoardinc.Hoard", # optional app identifier,
    save_private_key: true,
    output_path: './certificates',
    p12_password: ENV['STORE_PASSWORD'],
    pem_name: 'com.hoardinc.Hoard - APS Production',
    new_profile: proc do |profile_path| # this block gets called when a new profile was generated
      puts profile_path # the absolute path to the new PEM file
      # insert the code to upload the PEM file to the server
    end
  )
end

lane :dev do |options|

  match(type: "development")
  match(type: "appstore")

  # match(type: "adhoc")
end

default_platform :ios

  before_all do
    # ensure_git_status_clean
    # ensure_no_debug_code(text: "# TODO", exclude_dirs: ["node_modules"])
    # ensure_no_debug_code(text: "<<<<<<<", exclude_dirs: ["node_modules"])
  end

  #################################################
  ##               PUBLIC LANES                  ##
  #################################################
  platform :ios do

    desc "Send an iOS build to Fabric for testing"
    lane :internal_beta_fabric do
      fabric_ios(scheme: "Testing")
    end

    desc "Send an iOS build to TestFlight for testing"
    lane :internal_beta_itc do
      itc(scheme: "Testing")
    end

  end

  platform :android do

    desc "Send an Android build to the Play Store for testing"
    lane :internal_beta_play do
      play(scheme: "Testing")
    end

  end

  ######################### PRIVATE LANES #########################
  #------------------- Fabric.io - Crashlytics -------------------#

  private_lane :fabric_ios do |options|
    scheme = options[:scheme]
    environment = scheme.upcase

    build_ios

    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_API_SECRET'],
      groups: 'developers',
      ipa_path: "./Hoard.ipa",
      notifications: false,
      notes: options[:notes] || "App Update - Running on #{environment}"
    )

    notify_slack(scheme: scheme, destination: "Fabric", platform: 'iOS')
  end

  private_lane :fabric_android do |options|
    scheme = options[:scheme]
    environment = scheme.upcase

    build_android

    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_API_SECRET'],
      groups: 'developers',
      notifications: false,
      notes: options[:notes] || "App Update - Running on #{environment}"
    )

    notify_slack(scheme: scheme, destination: "Fabric", platform: 'Android')
  end


  #-------------------------- App Stores -------------------------#
  private_lane :itc do |options|
    scheme = options[:scheme]

    release_notes = compile_release_notes(ios: true)

    build_ios(release_notes)

    upload_to_testflight(
      distribute_external: options[:distribute_external] || false,
      changelog: release_notes[:release_notes]
    )

    notify_slack(scheme: scheme, destination: "TestFlight", platform: 'iOS')

  end

  private_lane :play do |options|
    JSON_KEY_FILE = File.absolute_path('../android/app/' + ENV['GOOGLE_SERVICE_ACCOUNT_JSON'])

    scheme = options[:scheme]

    release_notes = compile_release_notes(android: true)
    puts release_notes

    build_android(release_notes)

    add_release_notes_to_android_metadata(release_notes)

    upload_to_play_store(
      track: 'alpha',
      package_name: APP_IDENTIFIER,
      metadata_path: File.absolute_path('./metadata/android/'),
      json_key: JSON_KEY_FILE,
      apk: './android/app/build/outputs/apk/release/app-release.apk'
    )

    notify_slack(scheme: scheme, destination: "Google Play Store", platform: 'Android')

  end

  ############################# UTIL ##############################

private_lane :build_ios do |options|
  scheme = options[:scheme]

  match(type: "appstore")
  # match(type: "ad-hoc")

  # bump version number
  if options[:version_code]
    increment_version_number(
      version_number: options[:version_code],
      xcodeproj: XCODE_PROJECT_PATH
    )
  end

  if options[:build_number]
    increment_build_number(
       build_number: options[:build_number],
       xcodeproj: XCODE_PROJECT_PATH
     )
  else
    increment_build_number(xcodeproj: XCODE_PROJECT_PATH)
  end

  gym(
    export_method: "app-store",
    # export_method: "ad-hoc",
    include_symbols: false,
    scheme: "Hoard",
    project: XCODE_PROJECT_PATH,
    xcargs: "ARCHIVE=YES",
  )
end

private_lane :build_android do |options|
  scheme = options[:scheme]

  # def increment_version_code(gradle_build: 'android/app/build.gradle')
  #   sh %Q{cd ../ && echo "$(awk '{sub(/versionCode [[:digit:]]+$/,"versionCode "$2+1)}1' #{gradle_build})" > #{gradle_build} && cd -}
  # end
  #

  def bump_android_version(version_name)
    versionNameRegex = /versionName\s+"(\d+.\d+)"/
    versionCodeRegex = /versionCode\s+(\d+)/

    s = File.read(GRADLE_PATH)
    s[versionNameRegex, 1] = version_name.to_s

    versionCode = s[versionCodeRegex, 1].to_i
    s[versionCodeRegex, 1] = (versionCode + 1).to_s

    f = File.new(GRADLE_PATH, 'w')
    f.write(s)
    f.close
  end

  # gradle runs from a different context and adds '/android/app' unnecessarily.
  KEYSTORE_PATH = File.absolute_path('../android/app/keystores/my-release-key.keystore')


  bump_android_version(options[:version_code])

  gradle(task: 'clean', project_dir: './android/',)

  gradle(
    task: 'assemble',
    build_type: 'Release',
    project_dir: './android/',
    properties: {
      "android.injected.signing.store.file" =>  KEYSTORE_PATH,
      "android.injected.signing.store.password" => ENV['STORE_PASSWORD'],
      "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
      "android.injected.signing.key.password" => ENV['KEY_PASSWORD'],
      }
  )
end


private_lane :notify_slack do |options|
  scheme      = options[:scheme]
  platform    = options[:platform]
  destination = options[:destination]
  version     = 'unknown'
  build       = 'unknown'

  if platform === 'iOS'
    version     = get_version_number(xcodeproj: XCODE_PROJECT_PATH, target: 'Hoard')
    build       = get_build_number(xcodeproj: XCODE_PROJECT_PATH)
  end

  if platform === 'Android'

      VC = /versionCode\s+(\d+)/
      VN = /versionName\s+"([^"]*)"/

      s = File.read(GRADLE_PATH)
      build = s[VC, 1].to_i
      version = s.scan(/versionName\s+"([^"]*)"/)
  end

  message     = "BETA BUILD to #{destination} #{platform}: *#{version}* (#{build})  :rocket:"

  UI.success(message)

  slack(
    channel: "#dev-updates",
    default_payloads: [],
    slack_url: ENV['SLACK_URL'],
    message: message,
  )

end

private_lane :compile_release_notes do |options|
  RELEASE_NOTES_PATH = '../src/release_notes.json';

  if options[:ios]
    version = get_version_number(xcodeproj: XCODE_PROJECT_PATH, target: 'Hoard')
  elsif options[:android]
    version = read_android_version
  end

  major_version = version.split('.').first
  minor_version = version.split('.').last
  bumped_minor_version = minor_version.to_i + 1
  bumped_version = "#{major_version}.#{bumped_minor_version}"

  release_notes = ""
  version_code = ""

  # read release notes file and find the most recent object written
  release_notes_array = JSON.parse(File.read(File.absolute_path(RELEASE_NOTES_PATH)))
  most_recent_release_notes = release_notes_array.first

  versions_aligned = true

  if not most_recent_release_notes.nil?
    versions_aligned = most_recent_release_notes["version_number"] == version or bumped_version == most_recent_release_notes["version_number"]
  end

  if versions_aligned
    release_notes = UI.input("Please enter notes for this version");
    version_code = bumped_version
    release_notes_array.unshift(release_notes: release_notes, version_code: version_code)
    f = File.open(File.absolute_path(RELEASE_NOTES_PATH), 'w')
    f.write(JSON.generate(release_notes_array))
  else
    release_notes = most_recent_release_notes["release_notes"]
    version_code = most_recent_release_notes["version_code"]
  end

  { :release_notes => release_notes, :version_code => version_code }
end

private_lane :add_release_notes_to_android_metadata do |options|
  CHANGELOG_PATH = './metadata/android/en-US/changelogs/'

  make_metadata_directory_as_needed(path: CHANGELOG_PATH)

  versionCode = read_android_version_code

  f = File.open(File.absolute_path("#{CHANGELOG_PATH}#{versionCode}.txt"), 'w')
  f.write(options[:release_notes])

  true
end

private_lane :make_metadata_directory_as_needed do |options|
  path_sections = options[:path].split("/")
  path_sections.map!.with_index {
    |path, i|
      if i === 0
        path
      else
        prev_path = path_sections[i - 1]
        "#{prev_path}/#{path}"
      end
  }
  path_sections.map {|path|
    if not File.exists? path
      Dir.mkdir path
    end
  }
end

def read_android_version
  re = /versionName\s+"(\d+.\d+)"/
  s = File.read(GRADLE_PATH)
  s[re, 1]
end

def read_android_version_code
  re = /versionCode\s+(\d+)/
  s = File.read(GRADLE_PATH)
  s[re, 1]
end
